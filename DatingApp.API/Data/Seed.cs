using DatingApp.API.Models;
using Microsoft.AspNetCore.Identity;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace DatingApp.API.Data
{
    public class Seed
    {
        //private DataContext _context;
        private readonly UserManager<User> _userManager;
        private readonly RoleManager<Role> _roleManager;

        public Seed(UserManager<User> userManager, RoleManager<Role> roleManager)
        {
            _userManager = userManager;
            _roleManager = roleManager;
        }

        public void SeedUsers()
        {
            if (!_userManager.Users.Any())
            {
                var userData = System.IO.File.ReadAllText("Data/UserSeedData.json");
                var users = JsonConvert.DeserializeObject<List<User>>(userData);

                var roles = new List<Role>
                {
                    new Role
                    {
                        Name = "Member"
                    },
                    new Role
                    {
                        Name = "Admin"
                    },
                    new Role
                    {
                        Name = "Moderator"
                    },
                    new Role
                    {
                        Name = "VIP"
                    },
                };

                foreach (var role in roles)
                {
                    _roleManager.CreateAsync(role).Wait();
                }

                foreach (var user in users)
                {
                    _userManager.CreateAsync(user, "password").Wait();
                    _userManager.AddToRoleAsync(user, "Member").Wait();
                }

                var adminUser = new User
                {
                    UserName = "administrator"
                };

                IdentityResult result = _userManager.CreateAsync(adminUser, "administrator").Result;

                if (result.Succeeded)
                {
                    var admin = _userManager.FindByNameAsync("administrator").Result;
                    _userManager.AddToRolesAsync(admin, new[] { "Admin", "Moderator" }).Wait();
                }

            }
        }

        //// TODO: Add helper class and move this method there // Copied from auth repositorys
        //private void CreatePasswordHash(string password, out byte[] passwordHash, out byte[] passwordSalt)
        //{
        //    using (var hmac = new System.Security.Cryptography.HMACSHA512())
        //    {
        //        passwordSalt = hmac.Key; // Key is randomly generated by instance of HMACSHA512 class
        //        passwordHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password)); // Creates a hash from password and joins it with passwordSalt
        //    }

        //}


        //public void SeedUsers()
        //{
        //    var userData = System.IO.File.ReadAllText("Data/UserSeedData.json");

        //    var users = JsonConvert.DeserializeObject<List<User>>(userData);

        //    foreach(var user in users)
        //    {
        //        byte[] passwordHash, passwordSalt;

        //        CreatePasswordHash("password", out passwordHash, out passwordSalt);

        //        //user.PasswordHash = passwordHash;
        //        //user.PasswordSalt = passwordSalt;
        //        user.UserName = user.UserName.ToLower();

        //        _context.Users.Add(user);
        //    }

        //    _context.SaveChanges();
        //}

        //// TODO: Add helper class and move this method there // Copied from auth repositorys
        //private void CreatePasswordHash(string password, out byte[] passwordHash, out byte[] passwordSalt)
        //{
        //    using (var hmac = new System.Security.Cryptography.HMACSHA512())
        //    {
        //        passwordSalt = hmac.Key; // Key is randomly generated by instance of HMACSHA512 class
        //        passwordHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password)); // Creates a hash from password and joins it with passwordSalt
        //    }

        //}
    }
}
