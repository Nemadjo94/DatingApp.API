using DatingApp.API.Data.Abstraction;
using DatingApp.API.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace DatingApp.API.Data
{
    public class AuthRepository : IAuthRepository
    {
        private readonly DataContext _context;

        public AuthRepository(DataContext context)
        {
            _context = context;
        }

        public async Task<User> Login(string username, string password)
        {
            // We include the photos for our nav bar user photo in the front end
            var user = await _context.Users.Include(p => p.Photos).FirstOrDefaultAsync(x => x.UserName == username);

            if(user == null)
            {
                return null;
            }

            //if(!VerifyPasswordHash(password, user.PasswordHash, user.PasswordSalt))
            //{
            //    return null;
            //}

            return user;
        }

        public async Task<User> Register(User user, string password) // Password is just plain string for now
        {
            byte[] passwordHash, passwordSalt; // initiate variables so we can store values later

            CreatePasswordHash(password, out passwordHash, out passwordSalt); // Out means that this method returns passwordHash and passwordSalt

            //user.PasswordHash = passwordHash;
            //user.PasswordSalt = passwordSalt;

            await _context.Users.AddAsync(user);
            await _context.SaveChangesAsync();

            return user;
        }
                
        public async Task<bool> UserExists(string username)
        {
            if(await _context.Users.AnyAsync(x => x.UserName == username))
            {
                return true;
            }

            return false;
        }
        

        // TODO: Add helper class and move this method there
        private void CreatePasswordHash(string password, out byte[] passwordHash, out byte[] passwordSalt)
        {
            using (var hmac = new System.Security.Cryptography.HMACSHA512())
            {
                passwordSalt = hmac.Key; // Key is randomly generated by instance of HMACSHA512 class
                passwordHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password)); // Creates a hash from password and joins it with passwordSalt
            }
            
        }

        private bool VerifyPasswordHash(string password, byte[] passwordHash, byte[] passwordSalt)
        {
            using (var hmac = new System.Security.Cryptography.HMACSHA512(passwordSalt)) // On uzima vec taj kljuc opet
            {
                var computedHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password)); // Pa generise hash sa istim kljucem

                for(int i = 0; i < computedHash.Length; i++)
                {
                    //TODO: make this better/shorter
                    if (computedHash[i] != passwordHash[i]) return false; // pa ako se generisani hash ne poklapa onda znaci da nije dobar password
                }
            }

            return true;
        }
    }
}
